= diff_drive_controller -- Differential-Driver Controller
:imagesdir: ./images

This repository implements ROS nodes to control and monitor a differential-drive robot.

== ROS API

=== 1. twist_to_wheels

Listens for desired linear and angular velocity, and publishes corresponding wheel velocities, in encoder ticks per second, required to achieve those velocities.

==== Published Topics

`~lwheel_desired_rate` (std_msgs/Int32)::
Desired left wheel rotation rate, in encoder ticks per second.

`~rwheel_desired_rate` (std_msgs/Int32)::
Desired right wheel rotation rate, in encoder ticks per second.

==== Subscribed Topics

`~cmd_vel` (geometry_msgs/Twist)::
Desired linear and angular velocity.

==== Parameters

`~ticks_per_meter` (double)::
Number of encoder ticks per meter of travel.

`~wheel_separation` (double)::
Distance between the two wheels (meters).

`~rate` (int, default: 50)::
The rate that the output velocity target messages will be published (Hz).

`~timeout_ticks` (int, default: 2)::
The number of velocity target messages that will be published after the last twist message is received.

=== 2. wheels_to_odometry

Listens for wheel movement and rates and publishes the transform between the odom frame and the robot frame.

==== Published Topics

`~odom` -- (nav_msgs/Odometry)::
The robot odometry -- the current robot pose.

`~tf`::
The transform between the odometry frame and the robot frame.

==== Subscribed Topics

`~lwheel_ticks` (std_msgs/Int32)::
Cumulative encoder ticks of the left wheel.

`~rwheel_ticks` (std_msgs/Int32)::
Cumulative encoder ticks of the right wheel.

`~lwheel_rate` (std_msgs/Float32)::
Left wheel rotation rate, in encoder ticks per second.

`~rwheel_rate` (std_msgs/Float32)::
Right wheel rotation rate, in encoder ticks per second.

==== Parameters

`~ticks_per_meter` (double)::
Number of encoder ticks per meter of travel.

`~wheel_separation` (double)::
Distance between the two wheels (m).

`~rate` (double, default 10.0)::
The rate at which the `tf` and `odom` topics are published (Hz).

`~timeout` (double, default 0.2)::
The amount of time to continue publishing desired wheel rates after receiving a twist message (seconds).
If set to zero, wheel velocities will be sent only when a new twist message is received.

`~base_frame_id` (string, default: "base_link")::
The name of the base frame of the robot. 

`~odom_frame_id` (string, default: "odom")::
The name of the odometry reference frame. 

`~encoder_min` (int, default: -32768)::

`~encoder_max` (int, default: 32768)::
The min and max value the encoder should output. Used to calculate odometry when the values wrap around. 

`~wheel_low_wrap` (int, default: 0.3 * (encoder_max - encoder_min + 1) + encoder_min)::

`~wheel_high_wrap` (int, default: 0.7 * (encoder_max - encoder_min + 1) + encoder_min)::
If a reading is greater than wheel_high_wrap and the next reading is less than wheel_low_wrap, then the reading has wrapped around in the positive direction, and the odometry will be calculated appropriately. The same concept applies for the negative direction.

=== 3. goal_to_twist

Listens for new goal poses and computes velocities needed to achieve the goal.

==== Published Topics

`~distance_to_goal` (std_msgs/Float32)::
Distance to the goal position (meters).

`~cmd_vel` (geometry_msgs/Twist)::
Desired linear and angular velocity to move toward the goal pose.

==== Subscribed Topics

`~goal` (geometry_msgs/Pose)::
Desired goal pose.

==== Parameters

`~rate` (float, default: 10)::
Rate at which to publish desired velocities (Hz).

`~goal_linear_tolerance` (float, default: 0.1)::
The distance from the goal at which the robot is assumed to have accomplished the goal position (meters).

`~goal_angular_tolerance` (float, default: 0.087)::
The difference between robot angle and goal pose angle at which the robot is assumed to have
accomplished the goal attitude (radians). Default value is approximately 5 degrees.

`~max_linear_velocity` (float, default: 0.2)::
The maximum linear velocity toward the goal (meters/second).

`~max_angular_velocity` (float, default: 1.5)::
The maximum angular velocity (radians/second).

`~max_linear_acceleration` (float, default: 4.0)::
The maximum linear acceleration (meters/second^2).

`~Kp` (float, default: 3.0)::
Linear distance proportionality constant. Higher values make the robot accelerate more quickly toward the goal and decelerate less quickly.

`~Ka` (float: default: 8.0)::
Proportionality constant for angle to goal position. Higher values make the robot turn more quickly toward the goal.

`~Kb` (float: default: 1.5)::
Proportionality constant for angle to goal pose direction. Higher values make the robot turn more quickly toward the goal pose direction.

The control law for determining the linear and angular velocity to move toward the goal works as follows. Let ~d~ be the distance to the goal. Let ~a~ be the angle between the robot heading and the goal position, where left is positive. If the goal is behind the robot, the robot will move backward, so ~a~ is always between -90 and 90 degrees. Let ~b~ be the angle between the goal direction and the final pose angle, where left is positive. Then the robot linear and angular velocities are calculated like this:

    v = Kp * d
    w = Ka*a + Kb*b

See _Autonomous Mobile Robots, Second Edition_ by Siegwart et. al., section 3.6.2.4. Here I have changed the sign of ~b~ (beta) and K~b~ to make the math simpler.

To ensure convergence toward the goal, K~p~, K~a~, and K~b~ must all be positive, and K~a~ must be greater than K~p~. To ensure robust convergence, so that the robot never changes direction, K~a~ - 5/3*K~b~ - 2/pi*K~p~ must be greater than zero.
